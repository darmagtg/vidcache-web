#!/usr/bin/php
<?php
//boot up to openlss
require(__DIR__.'/boot.php');

use \LSS\Db;
use \MimeMailParser\Parser;
use \MimeMailParser\Attachment;
use \Vidcache\Admin\Client;
use \Vidcache\Admin\Staff;
use \Vidcache\Admin\Ticket;
use \Vidcache\Admin\Ticket\Department as TicketDepartment;
use \Vidcache\Admin\Ticket\Message as TicketMessage;
use \Vidcache\Admin\Ticket\MessageAttachment as TicketMessageAttachment;

function getEmailFromHeader($header){
	preg_match('/(.+?)<(.+?)>/',$header,$m);
	if(count($m) == 3) $email = $m[2];
	elseif(count($m) == 2) $email = $m[1];
	else $email = $header;
	return $email;
}

$parser = new Parser();
$parser->setStream(STDIN);

$to = getEmailFromHeader($parser->getHeader('to'));
//set if we have a ticket department
$ticket_department = TicketDepartment::fetchByEmail($to);
//without a desintation department we stop now not our email
if(!$ticket_department){
	//try the cc
	$cc = getEmailFromHeader($parser->getHeader('cc'));
	$ticket_department = TicketDepartment::fetchByEmail($cc);
	if(!$ticket_department) exit(1); //no need to die with error
}

//see if we can figure out an existing ticket
$subject = $parser->getHeader('subject');
preg_match('/\[#([0-9]+)\]/',$subject,$m);
if(!isset($m[1])) $m[1] = null;
$ticket = Ticket::fetch($m[1]);

//if we dont have a ticket we need to create a new one
if(!$ticket){
	//TODO create ticket
} else {
	//update existing ticket
	try {
		Db::_get()->beginTransaction();
		$message_count = TicketMessage::countByTicket($ticket['ticket_id']);
		//gather some data
		$from = $parser->getHeader('from');
		preg_match('/(.+?)<(.+?)>/',$from,$m);
		if(count($m) == 3){
			$author_name = $m[1];
			$author_email = $m[2];
		} else {
			$author_name = $author_email = $from;
		}
		//check author type
		$staff = Staff::fetchByEmail($author_email);
		$client = Client::fetchByEmail($author_email);
		if($staff){
			$author_type = TicketMessage::AT_STAFF;
			$author_id = $staff['staff_id'];
			$message_type = TicketMessage::MT_STAFF_REPLY;
		} elseif($client){
			$author_type = TicketMessage::AT_CLIENT;
			$author_id = $client['client_id'];
			$message_type = TicketMessage::MT_CLIENT_REPLY;
		} else {
			$author_type = TicketMessage::AT_ANONYMOUS;
			$author_id = null;
			$message_type = TicketMessage::MT_ANONYMOUS_REPLY;
		}
		//get message
		$message = '';
		//exclude reply
		foreach(explode("\n",$parser->getMessageBody('text')) as $line){
			if(strpos($line,'>') === 0) continue;
			$message .= $line."\n";
		}
		if(empty($message)) $parser->getMessageBody('html');
		//create ticket message
		$ticket_message_id = TicketMessage::create($ticket['ticket_id'],array(
			 'author_name'		=>	$author_name
			,'author_email'		=>	$author_email
			,'author_type'		=>	$author_type
			,'author_id'		=>	$author_id
			,'message'			=>	$message
			,'message_type'		=>	$message_type
		));
		//add attachments if any
		foreach($parser->getAttachments() as $attachment){
			$content = $attachment->getContent();
			$checksum = sha1($content);
			$size = strlen($content);
			TicketMessageAttachment::create($ticket_message_id,$ticket['ticket_id'],array(
				  'mime_type'		=>	$attachment->getContentType()
				 ,'file_name'		=>	$attachment->getFileName()
				 ,'file_size'		=>	$size
				 ,'content'			=>	$content
				 ,'checksum'		=>	$checksum
			));
		}
		//update ticket update receipients
		Ticket::updateRecipients($ticket['ticket_id']);
		//email alerts about new reply
		TicketMessage::emailUpdate($ticket_message_id);
		Db::_get()->commit();
	} catch(Exception $e){
		Db::_get()->rollback();
		throw $e;
	}
}
exit(0);
